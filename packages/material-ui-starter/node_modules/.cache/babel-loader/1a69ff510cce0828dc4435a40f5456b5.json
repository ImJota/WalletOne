{"ast":null,"code":"import{WalletAdapterNetwork}from'@solana/wallet-adapter-base';import{WalletDialogProvider}from'@solana/wallet-adapter-material-ui';import{ConnectionProvider,WalletProvider}from'@solana/wallet-adapter-react';import{getBloctoWallet,getLedgerWallet,getPhantomWallet,getSlopeWallet,getSolflareWallet,getSolletWallet,getSolletExtensionWallet,getTorusWallet}from'@solana/wallet-adapter-wallets';import{clusterApiUrl}from'@solana/web3.js';import{useSnackbar}from'notistack';import React,{useCallback,useMemo}from'react';import Navigation from'./Navigation';import{jsx as _jsx}from\"react/jsx-runtime\";var Wallet=function Wallet(){var network=WalletAdapterNetwork.Devnet;var endpoint=useMemo(function(){return clusterApiUrl(network);},[network]);// @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n// Only the wallets you want to support will be compiled into your application\nvar wallets=useMemo(function(){return[getPhantomWallet(),getSolflareWallet(),getSlopeWallet(),getTorusWallet({options:{clientId:'Get a client ID @ https://developer.tor.us'}}),getLedgerWallet(),getBloctoWallet({network:network}),getSolletWallet({network:network}),getSolletExtensionWallet({network:network})];},[network]);var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;var onError=useCallback(function(error){enqueueSnackbar(error.message?\"\".concat(error.name,\": \").concat(error.message):error.name,{variant:'error'});console.error(error);},[enqueueSnackbar]);return/*#__PURE__*/_jsx(ConnectionProvider,{endpoint:endpoint,children:/*#__PURE__*/_jsx(WalletProvider,{wallets:wallets,onError:onError,autoConnect:true,children:/*#__PURE__*/_jsx(WalletDialogProvider,{children:/*#__PURE__*/_jsx(Navigation,{})})})});};export default Wallet;","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/material-ui-starter/src/Wallet.tsx"],"names":["WalletAdapterNetwork","WalletDialogProvider","ConnectionProvider","WalletProvider","getBloctoWallet","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getTorusWallet","clusterApiUrl","useSnackbar","React","useCallback","useMemo","Navigation","Wallet","network","Devnet","endpoint","wallets","options","clientId","enqueueSnackbar","onError","error","message","name","variant","console"],"mappings":"AAAA,OAASA,oBAAT,KAAkD,6BAAlD,CACA,OAASC,oBAAT,KAAqC,oCAArC,CACA,OAASC,kBAAT,CAA6BC,cAA7B,KAAmD,8BAAnD,CACA,OACIC,eADJ,CAEIC,eAFJ,CAGIC,gBAHJ,CAIIC,cAJJ,CAKIC,iBALJ,CAMIC,eANJ,CAOIC,wBAPJ,CAQIC,cARJ,KASO,gCATP,CAUA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,WAAT,KAA4B,WAA5B,CACA,MAAOC,CAAAA,KAAP,EAAoBC,WAApB,CAAiCC,OAAjC,KAAgD,OAAhD,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,C,2CAEA,GAAMC,CAAAA,MAAU,CAAG,QAAbA,CAAAA,MAAa,EAAM,CACrB,GAAMC,CAAAA,OAAO,CAAGnB,oBAAoB,CAACoB,MAArC,CACA,GAAMC,CAAAA,QAAQ,CAAGL,OAAO,CAAC,iBAAMJ,CAAAA,aAAa,CAACO,OAAD,CAAnB,EAAD,CAA+B,CAACA,OAAD,CAA/B,CAAxB,CAEA;AACA;AACA,GAAMG,CAAAA,OAAO,CAAGN,OAAO,CACnB,iBAAM,CACFV,gBAAgB,EADd,CAEFE,iBAAiB,EAFf,CAGFD,cAAc,EAHZ,CAIFI,cAAc,CAAC,CACXY,OAAO,CAAE,CAAEC,QAAQ,CAAE,4CAAZ,CADE,CAAD,CAJZ,CAOFnB,eAAe,EAPb,CAQFD,eAAe,CAAC,CAAEe,OAAO,CAAPA,OAAF,CAAD,CARb,CASFV,eAAe,CAAC,CAAEU,OAAO,CAAPA,OAAF,CAAD,CATb,CAUFT,wBAAwB,CAAC,CAAES,OAAO,CAAPA,OAAF,CAAD,CAVtB,CAAN,EADmB,CAanB,CAACA,OAAD,CAbmB,CAAvB,CAgBA,iBAA4BN,WAAW,EAAvC,CAAQY,eAAR,cAAQA,eAAR,CACA,GAAMC,CAAAA,OAAO,CAAGX,WAAW,CACvB,SAACY,KAAD,CAAwB,CACpBF,eAAe,CAACE,KAAK,CAACC,OAAN,WAAmBD,KAAK,CAACE,IAAzB,cAAkCF,KAAK,CAACC,OAAxC,EAAoDD,KAAK,CAACE,IAA3D,CAAiE,CAAEC,OAAO,CAAE,OAAX,CAAjE,CAAf,CACAC,OAAO,CAACJ,KAAR,CAAcA,KAAd,EACH,CAJsB,CAKvB,CAACF,eAAD,CALuB,CAA3B,CAQA,mBACI,KAAC,kBAAD,EAAoB,QAAQ,CAAEJ,QAA9B,uBACI,KAAC,cAAD,EAAgB,OAAO,CAAEC,OAAzB,CAAkC,OAAO,CAAEI,OAA3C,CAAoD,WAAW,KAA/D,uBACI,KAAC,oBAAD,wBACI,KAAC,UAAD,IADJ,EADJ,EADJ,EADJ,CASH,CAxCD,CA0CA,cAAeR,CAAAA,MAAf","sourcesContent":["import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport {\n    getBloctoWallet,\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { useSnackbar } from 'notistack';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport Navigation from './Navigation';\n\nconst Wallet: FC = () => {\n    const network = WalletAdapterNetwork.Devnet;\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n    // Only the wallets you want to support will be compiled into your application\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSolflareWallet(),\n            getSlopeWallet(),\n            getTorusWallet({\n                options: { clientId: 'Get a client ID @ https://developer.tor.us' },\n            }),\n            getLedgerWallet(),\n            getBloctoWallet({ network }),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n        ],\n        [network]\n    );\n\n    const { enqueueSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect>\n                <WalletDialogProvider>\n                    <Navigation />\n                </WalletDialogProvider>\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}