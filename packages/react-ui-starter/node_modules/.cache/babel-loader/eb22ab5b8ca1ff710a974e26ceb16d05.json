{"ast":null,"code":"import{WalletAdapterNetwork}from'@solana/wallet-adapter-base';import{ConnectionProvider,WalletProvider}from'@solana/wallet-adapter-react';import{WalletModalProvider}from'@solana/wallet-adapter-react-ui';import{getBloctoWallet,getLedgerWallet,getPhantomWallet,getSlopeWallet,getSolflareWallet,getSolletWallet,getSolletExtensionWallet,getTorusWallet}from'@solana/wallet-adapter-wallets';import{clusterApiUrl}from'@solana/web3.js';import React,{useCallback,useMemo}from'react';import toast,{Toaster}from'react-hot-toast';import Navigation from'./Navigation';import Notification from'./Notification';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Wallet=function Wallet(){var network=WalletAdapterNetwork.Devnet;var endpoint=useMemo(function(){return clusterApiUrl(network);},[network]);// @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n// Only the wallets you want to support will be compiled into your application\nvar wallets=useMemo(function(){return[getPhantomWallet(),getSolflareWallet(),getSlopeWallet(),getTorusWallet({options:{clientId:'Get a client ID @ https://developer.tor.us'}}),getLedgerWallet(),getBloctoWallet({network:network}),getSolletWallet({network:network}),getSolletExtensionWallet({network:network})];},[network]);var onError=useCallback(function(error){return toast.custom(/*#__PURE__*/_jsx(Notification,{message:error.message?\"\".concat(error.name,\": \").concat(error.message):error.name,variant:\"error\"}));},[]);return/*#__PURE__*/_jsx(ConnectionProvider,{endpoint:endpoint,children:/*#__PURE__*/_jsxs(WalletProvider,{wallets:wallets,onError:onError,autoConnect:true,children:[/*#__PURE__*/_jsx(WalletModalProvider,{children:/*#__PURE__*/_jsx(Navigation,{})}),/*#__PURE__*/_jsx(Toaster,{position:\"bottom-left\",reverseOrder:false})]})});};export default Wallet;","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/react-ui-starter/src/Wallet.tsx"],"names":["WalletAdapterNetwork","ConnectionProvider","WalletProvider","WalletModalProvider","getBloctoWallet","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getTorusWallet","clusterApiUrl","React","useCallback","useMemo","toast","Toaster","Navigation","Notification","Wallet","network","Devnet","endpoint","wallets","options","clientId","onError","error","custom","message","name"],"mappings":"AAAA,OAASA,oBAAT,KAAkD,6BAAlD,CACA,OAASC,kBAAT,CAA6BC,cAA7B,KAAmD,8BAAnD,CACA,OAASC,mBAAT,KAAoC,iCAApC,CACA,OACIC,eADJ,CAEIC,eAFJ,CAGIC,gBAHJ,CAIIC,cAJJ,CAKIC,iBALJ,CAMIC,eANJ,CAOIC,wBAPJ,CAQIC,cARJ,KASO,gCATP,CAUA,OAASC,aAAT,KAA8B,iBAA9B,CACA,MAAOC,CAAAA,KAAP,EAAoBC,WAApB,CAAiCC,OAAjC,KAAgD,OAAhD,CACA,MAAOC,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,iBAA/B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,C,wFAEA,GAAMC,CAAAA,MAAU,CAAG,QAAbA,CAAAA,MAAa,EAAM,CACrB,GAAMC,CAAAA,OAAO,CAAGrB,oBAAoB,CAACsB,MAArC,CACA,GAAMC,CAAAA,QAAQ,CAAGR,OAAO,CAAC,iBAAMH,CAAAA,aAAa,CAACS,OAAD,CAAnB,EAAD,CAA+B,CAACA,OAAD,CAA/B,CAAxB,CAEA;AACA;AACA,GAAMG,CAAAA,OAAO,CAAGT,OAAO,CACnB,iBAAM,CACFT,gBAAgB,EADd,CAEFE,iBAAiB,EAFf,CAGFD,cAAc,EAHZ,CAIFI,cAAc,CAAC,CACXc,OAAO,CAAE,CAAEC,QAAQ,CAAE,4CAAZ,CADE,CAAD,CAJZ,CAOFrB,eAAe,EAPb,CAQFD,eAAe,CAAC,CAAEiB,OAAO,CAAPA,OAAF,CAAD,CARb,CASFZ,eAAe,CAAC,CAAEY,OAAO,CAAPA,OAAF,CAAD,CATb,CAUFX,wBAAwB,CAAC,CAAEW,OAAO,CAAPA,OAAF,CAAD,CAVtB,CAAN,EADmB,CAanB,CAACA,OAAD,CAbmB,CAAvB,CAgBA,GAAMM,CAAAA,OAAO,CAAGb,WAAW,CACvB,SAACc,KAAD,QACIZ,CAAAA,KAAK,CAACa,MAAN,cACI,KAAC,YAAD,EACI,OAAO,CAAED,KAAK,CAACE,OAAN,WAAmBF,KAAK,CAACG,IAAzB,cAAkCH,KAAK,CAACE,OAAxC,EAAoDF,KAAK,CAACG,IADvE,CAEI,OAAO,CAAC,OAFZ,EADJ,CADJ,EADuB,CAQvB,EARuB,CAA3B,CAWA,mBACI,KAAC,kBAAD,EAAoB,QAAQ,CAAER,QAA9B,uBACI,MAAC,cAAD,EAAgB,OAAO,CAAEC,OAAzB,CAAkC,OAAO,CAAEG,OAA3C,CAAoD,WAAW,KAA/D,wBACI,KAAC,mBAAD,wBACI,KAAC,UAAD,IADJ,EADJ,cAII,KAAC,OAAD,EAAS,QAAQ,CAAC,aAAlB,CAAgC,YAAY,CAAE,KAA9C,EAJJ,GADJ,EADJ,CAUH,CA3CD,CA6CA,cAAeP,CAAAA,MAAf","sourcesContent":["import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport {\n    getBloctoWallet,\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Navigation from './Navigation';\nimport Notification from './Notification';\n\nconst Wallet: FC = () => {\n    const network = WalletAdapterNetwork.Devnet;\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n    // Only the wallets you want to support will be compiled into your application\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSolflareWallet(),\n            getSlopeWallet(),\n            getTorusWallet({\n                options: { clientId: 'Get a client ID @ https://developer.tor.us' },\n            }),\n            getLedgerWallet(),\n            getBloctoWallet({ network }),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n        ],\n        [network]\n    );\n\n    const onError = useCallback(\n        (error: WalletError) =>\n            toast.custom(\n                <Notification\n                    message={error.message ? `${error.name}: ${error.message}` : error.name}\n                    variant=\"error\"\n                />\n            ),\n        []\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect>\n                <WalletModalProvider>\n                    <Navigation />\n                </WalletModalProvider>\n                <Toaster position=\"bottom-left\" reverseOrder={false} />\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}