{"ast":null,"code":"var _jsxFileName = \"/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/SignMessage.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@material-ui/core';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport bs58 from 'bs58';\nimport React, { useCallback } from 'react';\nimport { useNotify } from './notify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignMessage = () => {\n  _s();\n\n  const {\n    publicKey,\n    signMessage\n  } = useWallet();\n  const notify = useNotify();\n  const onClick = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!');\n      return;\n    }\n\n    if (!signMessage) {\n      notify('error', 'Wallet does not support message signing!');\n      return;\n    }\n\n    try {\n      const message = new TextEncoder().encode('Hello, world!');\n      const signature = await signMessage(message);\n      notify('success', `Message signature: ${bs58.encode(signature)}`);\n    } catch (error) {\n      notify('error', `Signing failed! ${error === null || error === void 0 ? void 0 : error.message}`);\n      return;\n    }\n  }, [publicKey, notify, signMessage]);\n  return signMessage ? /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onClick,\n    disabled: !publicKey,\n    children: \"Sign Message\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this) : null;\n};\n\n_s(SignMessage, \"ZuUsghNPhyyOEYpMQoqqqWXgp7c=\", false, function () {\n  return [useWallet, useNotify];\n});\n\n_c = SignMessage;\nexport default SignMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignMessage\");","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/SignMessage.tsx"],"names":["Button","useWallet","bs58","React","useCallback","useNotify","SignMessage","publicKey","signMessage","notify","onClick","message","TextEncoder","encode","signature","error"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,UAA1B;;;AAEA,MAAMC,WAAe,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BP,SAAS,EAA5C;AACA,QAAMQ,MAAM,GAAGJ,SAAS,EAAxB;AAEA,QAAMK,OAAO,GAAGN,WAAW,CAAC,YAAY;AACpC,QAAI,CAACG,SAAL,EAAgB;AACZE,MAAAA,MAAM,CAAC,OAAD,EAAU,uBAAV,CAAN;AACA;AACH;;AACD,QAAI,CAACD,WAAL,EAAkB;AACdC,MAAAA,MAAM,CAAC,OAAD,EAAU,0CAAV,CAAN;AACA;AACH;;AAED,QAAI;AACA,YAAME,OAAO,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyB,eAAzB,CAAhB;AAEA,YAAMC,SAAS,GAAG,MAAMN,WAAW,CAACG,OAAD,CAAnC;AACAF,MAAAA,MAAM,CAAC,SAAD,EAAa,sBAAqBP,IAAI,CAACW,MAAL,CAAYC,SAAZ,CAAuB,EAAzD,CAAN;AACH,KALD,CAKE,OAAOC,KAAP,EAAmB;AACjBN,MAAAA,MAAM,CAAC,OAAD,EAAW,mBAAkBM,KAAnB,aAAmBA,KAAnB,uBAAmBA,KAAK,CAAEJ,OAAQ,EAA5C,CAAN;AACA;AACH;AACJ,GAnB0B,EAmBxB,CAACJ,SAAD,EAAYE,MAAZ,EAAoBD,WAApB,CAnBwB,CAA3B;AAqBA,SAAOA,WAAW,gBACd,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAA8C,IAAA,OAAO,EAAEE,OAAvD;AAAgE,IAAA,QAAQ,EAAE,CAACH,SAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADc,GAId,IAJJ;AAKH,CA9BD;;GAAMD,W;UACiCL,S,EACpBI,S;;;KAFbC,W;AAgCN,eAAeA,WAAf","sourcesContent":["import { Button } from '@material-ui/core';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport bs58 from 'bs58';\nimport React, { FC, useCallback } from 'react';\nimport { useNotify } from './notify';\n\nconst SignMessage: FC = () => {\n    const { publicKey, signMessage } = useWallet();\n    const notify = useNotify();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify('error', 'Wallet not connected!');\n            return;\n        }\n        if (!signMessage) {\n            notify('error', 'Wallet does not support message signing!');\n            return;\n        }\n\n        try {\n            const message = new TextEncoder().encode('Hello, world!');\n\n            const signature = await signMessage(message);\n            notify('success', `Message signature: ${bs58.encode(signature)}`);\n        } catch (error: any) {\n            notify('error', `Signing failed! ${error?.message}`);\n            return;\n        }\n    }, [publicKey, notify, signMessage]);\n\n    return signMessage ? (\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClick} disabled={!publicKey}>\n            Sign Message\n        </Button>\n    ) : null;\n};\n\nexport default SignMessage;\n"]},"metadata":{},"sourceType":"module"}