{"ast":null,"code":"import _regeneratorRuntime from\"/home/jose/Documentos/Proyects/wallet/wallet-adapter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jose/Documentos/Proyects/wallet/wallet-adapter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Button}from'@material-ui/core';import{useConnection,useWallet}from'@solana/wallet-adapter-react';import{LAMPORTS_PER_SOL}from'@solana/web3.js';import React,{useCallback}from'react';import{useNotify}from'./notify';import{jsx as _jsx}from\"react/jsx-runtime\";var RequestAirdrop=function RequestAirdrop(){var _useConnection=useConnection(),connection=_useConnection.connection;var _useWallet=useWallet(),publicKey=_useWallet.publicKey;var notify=useNotify();var onClick=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var signature;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(publicKey){_context.next=3;break;}notify('error','Wallet not connected!');return _context.abrupt(\"return\");case 3:signature='';_context.prev=4;_context.next=7;return connection.requestAirdrop(publicKey,LAMPORTS_PER_SOL);case 7:signature=_context.sent;notify('info','Airdrop requested:',signature);_context.next=11;return connection.confirmTransaction(signature,'processed');case 11:notify('success','Airdrop successful!',signature);_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](4);notify('error',\"Airdrop failed! \".concat(_context.t0===null||_context.t0===void 0?void 0:_context.t0.message),signature);case 17:case\"end\":return _context.stop();}}},_callee,null,[[4,14]]);})),[publicKey,notify,connection]);return/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:onClick,disabled:!publicKey,children:\"Request Airdrop\"});};export default RequestAirdrop;","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/RequestAirdrop.tsx"],"names":["Button","useConnection","useWallet","LAMPORTS_PER_SOL","React","useCallback","useNotify","RequestAirdrop","connection","publicKey","notify","onClick","signature","requestAirdrop","confirmTransaction","message"],"mappings":"mVAAA,OAASA,MAAT,KAAuB,mBAAvB,CACA,OAASC,aAAT,CAAwBC,SAAxB,KAAyC,8BAAzC,CACA,OAASC,gBAAT,KAAuD,iBAAvD,CACA,MAAOC,CAAAA,KAAP,EAAoBC,WAApB,KAAuC,OAAvC,CACA,OAASC,SAAT,KAA0B,UAA1B,C,2CAEA,GAAMC,CAAAA,cAAkB,CAAG,QAArBA,CAAAA,cAAqB,EAAM,CAC7B,mBAAuBN,aAAa,EAApC,CAAQO,UAAR,gBAAQA,UAAR,CACA,eAAsBN,SAAS,EAA/B,CAAQO,SAAR,YAAQA,SAAR,CACA,GAAMC,CAAAA,MAAM,CAAGJ,SAAS,EAAxB,CAEA,GAAMK,CAAAA,OAAO,CAAGN,WAAW,sEAAC,oJACnBI,SADmB,yBAEpBC,MAAM,CAAC,OAAD,CAAU,uBAAV,CAAN,CAFoB,wCAMpBE,SANoB,CAMc,EANd,uCAQFJ,CAAAA,UAAU,CAACK,cAAX,CAA0BJ,SAA1B,CAAqCN,gBAArC,CARE,QAQpBS,SARoB,eASpBF,MAAM,CAAC,MAAD,CAAS,oBAAT,CAA+BE,SAA/B,CAAN,CAToB,uBAWdJ,CAAAA,UAAU,CAACM,kBAAX,CAA8BF,SAA9B,CAAyC,WAAzC,CAXc,SAYpBF,MAAM,CAAC,SAAD,CAAY,qBAAZ,CAAmCE,SAAnC,CAAN,CAZoB,iFAcpBF,MAAM,CAAC,OAAD,2EAA6B,YAAOK,OAApC,EAA+CH,SAA/C,CAAN,CAdoB,qEAAD,GAgBxB,CAACH,SAAD,CAAYC,MAAZ,CAAoBF,UAApB,CAhBwB,CAA3B,CAkBA,mBACI,KAAC,MAAD,EAAQ,OAAO,CAAC,WAAhB,CAA4B,KAAK,CAAC,WAAlC,CAA8C,OAAO,CAAEG,OAAvD,CAAgE,QAAQ,CAAE,CAACF,SAA3E,6BADJ,CAKH,CA5BD,CA8BA,cAAeF,CAAAA,cAAf","sourcesContent":["import { Button } from '@material-ui/core';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL, TransactionSignature } from '@solana/web3.js';\nimport React, { FC, useCallback } from 'react';\nimport { useNotify } from './notify';\n\nconst RequestAirdrop: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey } = useWallet();\n    const notify = useNotify();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify('error', 'Wallet not connected!');\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n            signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);\n            notify('info', 'Airdrop requested:', signature);\n\n            await connection.confirmTransaction(signature, 'processed');\n            notify('success', 'Airdrop successful!', signature);\n        } catch (error: any) {\n            notify('error', `Airdrop failed! ${error?.message}`, signature);\n        }\n    }, [publicKey, notify, connection]);\n\n    return (\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClick} disabled={!publicKey}>\n            Request Airdrop\n        </Button>\n    );\n};\n\nexport default RequestAirdrop;\n"]},"metadata":{},"sourceType":"module"}