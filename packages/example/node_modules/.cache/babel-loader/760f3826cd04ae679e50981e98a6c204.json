{"ast":null,"code":"import _regeneratorRuntime from\"/home/jose/Documentos/Proyects/wallet/wallet-adapter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jose/Documentos/Proyects/wallet/wallet-adapter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Button}from'@material-ui/core';import{useConnection,useWallet}from'@solana/wallet-adapter-react';import{Keypair,SystemProgram,Transaction}from'@solana/web3.js';import React,{useCallback}from'react';import{useNotify}from'./notify';import{jsx as _jsx}from\"react/jsx-runtime\";var SendTransaction=function SendTransaction(){var _useConnection=useConnection(),connection=_useConnection.connection;var _useWallet=useWallet(),publicKey=_useWallet.publicKey,sendTransaction=_useWallet.sendTransaction;var notify=useNotify();var onClick=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var signature,transaction;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(publicKey){_context.next=3;break;}notify('error','Wallet not connected!');return _context.abrupt(\"return\");case 3:signature='';_context.prev=4;transaction=new Transaction().add(SystemProgram.transfer({fromPubkey:publicKey,toPubkey:Keypair.generate().publicKey,lamports:1}));_context.next=8;return sendTransaction(transaction,connection);case 8:signature=_context.sent;notify('info','Transaction sent:',signature);_context.next=12;return connection.confirmTransaction(signature,'processed');case 12:notify('success','Transaction successful!',signature);_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](4);notify('error',\"Transaction failed! \".concat(_context.t0===null||_context.t0===void 0?void 0:_context.t0.message),signature);return _context.abrupt(\"return\");case 19:case\"end\":return _context.stop();}}},_callee,null,[[4,15]]);})),[publicKey,notify,connection,sendTransaction]);return/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:onClick,disabled:!publicKey,children:\"Send Transaction (devnet)\"});};export default SendTransaction;","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/SendTransaction.tsx"],"names":["Button","useConnection","useWallet","Keypair","SystemProgram","Transaction","React","useCallback","useNotify","SendTransaction","connection","publicKey","sendTransaction","notify","onClick","signature","transaction","add","transfer","fromPubkey","toPubkey","generate","lamports","confirmTransaction","message"],"mappings":"mVAAA,OAASA,MAAT,KAAuB,mBAAvB,CACA,OAASC,aAAT,CAAwBC,SAAxB,KAAyC,8BAAzC,CACA,OAASC,OAAT,CAAkBC,aAAlB,CAAiCC,WAAjC,KAA0E,iBAA1E,CACA,MAAOC,CAAAA,KAAP,EAAoBC,WAApB,KAAuC,OAAvC,CACA,OAASC,SAAT,KAA0B,UAA1B,C,2CAEA,GAAMC,CAAAA,eAAmB,CAAG,QAAtBA,CAAAA,eAAsB,EAAM,CAC9B,mBAAuBR,aAAa,EAApC,CAAQS,UAAR,gBAAQA,UAAR,CACA,eAAuCR,SAAS,EAAhD,CAAQS,SAAR,YAAQA,SAAR,CAAmBC,eAAnB,YAAmBA,eAAnB,CACA,GAAMC,CAAAA,MAAM,CAAGL,SAAS,EAAxB,CAEA,GAAMM,CAAAA,OAAO,CAAGP,WAAW,sEAAC,gKACnBI,SADmB,yBAEpBE,MAAM,CAAC,OAAD,CAAU,uBAAV,CAAN,CAFoB,wCAMpBE,SANoB,CAMc,EANd,iBAQdC,WARc,CAQA,GAAIX,CAAAA,WAAJ,GAAkBY,GAAlB,CAChBb,aAAa,CAACc,QAAd,CAAuB,CACnBC,UAAU,CAAER,SADO,CAEnBS,QAAQ,CAAEjB,OAAO,CAACkB,QAAR,GAAmBV,SAFV,CAGnBW,QAAQ,CAAE,CAHS,CAAvB,CADgB,CARA,uBAgBFV,CAAAA,eAAe,CAACI,WAAD,CAAcN,UAAd,CAhBb,QAgBpBK,SAhBoB,eAiBpBF,MAAM,CAAC,MAAD,CAAS,mBAAT,CAA8BE,SAA9B,CAAN,CAjBoB,uBAmBdL,CAAAA,UAAU,CAACa,kBAAX,CAA8BR,SAA9B,CAAyC,WAAzC,CAnBc,SAoBpBF,MAAM,CAAC,SAAD,CAAY,yBAAZ,CAAuCE,SAAvC,CAAN,CApBoB,iFAsBpBF,MAAM,CAAC,OAAD,+EAAiC,YAAOW,OAAxC,EAAmDT,SAAnD,CAAN,CAtBoB,sGAAD,GAyBxB,CAACJ,SAAD,CAAYE,MAAZ,CAAoBH,UAApB,CAAgCE,eAAhC,CAzBwB,CAA3B,CA2BA,mBACI,KAAC,MAAD,EAAQ,OAAO,CAAC,WAAhB,CAA4B,KAAK,CAAC,WAAlC,CAA8C,OAAO,CAAEE,OAAvD,CAAgE,QAAQ,CAAE,CAACH,SAA3E,uCADJ,CAKH,CArCD,CAuCA,cAAeF,CAAAA,eAAf","sourcesContent":["import { Button } from '@material-ui/core';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction, TransactionSignature } from '@solana/web3.js';\nimport React, { FC, useCallback } from 'react';\nimport { useNotify } from './notify';\n\nconst SendTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const notify = useNotify();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify('error', 'Wallet not connected!');\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n            const transaction = new Transaction().add(\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1,\n                })\n            );\n\n            signature = await sendTransaction(transaction, connection);\n            notify('info', 'Transaction sent:', signature);\n\n            await connection.confirmTransaction(signature, 'processed');\n            notify('success', 'Transaction successful!', signature);\n        } catch (error: any) {\n            notify('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClick} disabled={!publicKey}>\n            Send Transaction (devnet)\n        </Button>\n    );\n};\n\nexport default SendTransaction;\n"]},"metadata":{},"sourceType":"module"}