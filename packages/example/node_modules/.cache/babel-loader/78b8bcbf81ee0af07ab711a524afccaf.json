{"ast":null,"code":"var _jsxFileName = \"/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/SendTransaction.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@material-ui/core';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction } from '@solana/web3.js';\nimport React, { useCallback } from 'react';\nimport { useNotify } from './notify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SendTransaction = () => {\n  _s();\n\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey,\n    sendTransaction\n  } = useWallet();\n  const notify = useNotify();\n  const onClick = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!');\n      return;\n    }\n\n    let signature = '';\n\n    try {\n      const transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: Keypair.generate().publicKey,\n        lamports: 1\n      }));\n      signature = await sendTransaction(transaction, connection);\n      notify('info', 'Transaction sent:', signature);\n      await connection.confirmTransaction(signature, 'processed');\n      notify('success', 'Transaction successful!', signature);\n    } catch (error) {\n      notify('error', `Transaction failed! ${error === null || error === void 0 ? void 0 : error.message}`, signature);\n      return;\n    }\n  }, [publicKey, notify, connection, sendTransaction]);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onClick,\n    disabled: !publicKey,\n    children: \"Send Transaction (devnet)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SendTransaction, \"zAJPWrbDzEsTE4vrL9LVSQ3Xg44=\", false, function () {\n  return [useConnection, useWallet, useNotify];\n});\n\n_c = SendTransaction;\nexport default SendTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendTransaction\");","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/SendTransaction.tsx"],"names":["Button","useConnection","useWallet","Keypair","SystemProgram","Transaction","React","useCallback","useNotify","SendTransaction","connection","publicKey","sendTransaction","notify","onClick","signature","transaction","add","transfer","fromPubkey","toPubkey","generate","lamports","confirmTransaction","error","message"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,8BAAzC;AACA,SAASC,OAAT,EAAkBC,aAAlB,EAAiCC,WAAjC,QAA0E,iBAA1E;AACA,OAAOC,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,UAA1B;;;AAEA,MAAMC,eAAmB,GAAG,MAAM;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAiBT,aAAa,EAApC;AACA,QAAM;AAAEU,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAiCV,SAAS,EAAhD;AACA,QAAMW,MAAM,GAAGL,SAAS,EAAxB;AAEA,QAAMM,OAAO,GAAGP,WAAW,CAAC,YAAY;AACpC,QAAI,CAACI,SAAL,EAAgB;AACZE,MAAAA,MAAM,CAAC,OAAD,EAAU,uBAAV,CAAN;AACA;AACH;;AAED,QAAIE,SAA+B,GAAG,EAAtC;;AACA,QAAI;AACA,YAAMC,WAAW,GAAG,IAAIX,WAAJ,GAAkBY,GAAlB,CAChBb,aAAa,CAACc,QAAd,CAAuB;AACnBC,QAAAA,UAAU,EAAER,SADO;AAEnBS,QAAAA,QAAQ,EAAEjB,OAAO,CAACkB,QAAR,GAAmBV,SAFV;AAGnBW,QAAAA,QAAQ,EAAE;AAHS,OAAvB,CADgB,CAApB;AAQAP,MAAAA,SAAS,GAAG,MAAMH,eAAe,CAACI,WAAD,EAAcN,UAAd,CAAjC;AACAG,MAAAA,MAAM,CAAC,MAAD,EAAS,mBAAT,EAA8BE,SAA9B,CAAN;AAEA,YAAML,UAAU,CAACa,kBAAX,CAA8BR,SAA9B,EAAyC,WAAzC,CAAN;AACAF,MAAAA,MAAM,CAAC,SAAD,EAAY,yBAAZ,EAAuCE,SAAvC,CAAN;AACH,KAdD,CAcE,OAAOS,KAAP,EAAmB;AACjBX,MAAAA,MAAM,CAAC,OAAD,EAAW,uBAAsBW,KAAvB,aAAuBA,KAAvB,uBAAuBA,KAAK,CAAEC,OAAQ,EAAhD,EAAmDV,SAAnD,CAAN;AACA;AACH;AACJ,GAzB0B,EAyBxB,CAACJ,SAAD,EAAYE,MAAZ,EAAoBH,UAApB,EAAgCE,eAAhC,CAzBwB,CAA3B;AA2BA,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAA8C,IAAA,OAAO,EAAEE,OAAvD;AAAgE,IAAA,QAAQ,EAAE,CAACH,SAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArCD;;GAAMF,e;UACqBR,a,EACgBC,S,EACxBM,S;;;KAHbC,e;AAuCN,eAAeA,eAAf","sourcesContent":["import { Button } from '@material-ui/core';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction, TransactionSignature } from '@solana/web3.js';\nimport React, { FC, useCallback } from 'react';\nimport { useNotify } from './notify';\n\nconst SendTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n    const notify = useNotify();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify('error', 'Wallet not connected!');\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n            const transaction = new Transaction().add(\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1,\n                })\n            );\n\n            signature = await sendTransaction(transaction, connection);\n            notify('info', 'Transaction sent:', signature);\n\n            await connection.confirmTransaction(signature, 'processed');\n            notify('success', 'Transaction successful!', signature);\n        } catch (error: any) {\n            notify('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClick} disabled={!publicKey}>\n            Send Transaction (devnet)\n        </Button>\n    );\n};\n\nexport default SendTransaction;\n"]},"metadata":{},"sourceType":"module"}