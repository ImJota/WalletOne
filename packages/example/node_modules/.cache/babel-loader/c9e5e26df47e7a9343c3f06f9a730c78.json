{"ast":null,"code":"var _jsxFileName = \"/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/RequestAirdrop.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@material-ui/core';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport React, { useCallback } from 'react';\nimport { useNotify } from './notify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RequestAirdrop = () => {\n  _s();\n\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const notify = useNotify();\n  const onClick = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!');\n      return;\n    }\n\n    let signature = '';\n\n    try {\n      signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);\n      notify('info', 'Airdrop requested:', signature);\n      await connection.confirmTransaction(signature, 'processed');\n      notify('success', 'Airdrop successful!', signature);\n    } catch (error) {\n      notify('error', `Airdrop failed! ${error === null || error === void 0 ? void 0 : error.message}`, signature);\n    }\n  }, [publicKey, notify, connection]);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onClick,\n    disabled: !publicKey,\n    children: \"Request Airdrop\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RequestAirdrop, \"c4bQVXUmQFkgHW08F4sHSgWHH9Y=\", false, function () {\n  return [useConnection, useWallet, useNotify];\n});\n\n_c = RequestAirdrop;\nexport default RequestAirdrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequestAirdrop\");","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/RequestAirdrop.tsx"],"names":["Button","useConnection","useWallet","LAMPORTS_PER_SOL","React","useCallback","useNotify","RequestAirdrop","connection","publicKey","notify","onClick","signature","requestAirdrop","confirmTransaction","error","message"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,8BAAzC;AACA,SAASC,gBAAT,QAAuD,iBAAvD;AACA,OAAOC,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,UAA1B;;;AAEA,MAAMC,cAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAiBP,aAAa,EAApC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBP,SAAS,EAA/B;AACA,QAAMQ,MAAM,GAAGJ,SAAS,EAAxB;AAEA,QAAMK,OAAO,GAAGN,WAAW,CAAC,YAAY;AACpC,QAAI,CAACI,SAAL,EAAgB;AACZC,MAAAA,MAAM,CAAC,OAAD,EAAU,uBAAV,CAAN;AACA;AACH;;AAED,QAAIE,SAA+B,GAAG,EAAtC;;AACA,QAAI;AACAA,MAAAA,SAAS,GAAG,MAAMJ,UAAU,CAACK,cAAX,CAA0BJ,SAA1B,EAAqCN,gBAArC,CAAlB;AACAO,MAAAA,MAAM,CAAC,MAAD,EAAS,oBAAT,EAA+BE,SAA/B,CAAN;AAEA,YAAMJ,UAAU,CAACM,kBAAX,CAA8BF,SAA9B,EAAyC,WAAzC,CAAN;AACAF,MAAAA,MAAM,CAAC,SAAD,EAAY,qBAAZ,EAAmCE,SAAnC,CAAN;AACH,KAND,CAME,OAAOG,KAAP,EAAmB;AACjBL,MAAAA,MAAM,CAAC,OAAD,EAAW,mBAAkBK,KAAnB,aAAmBA,KAAnB,uBAAmBA,KAAK,CAAEC,OAAQ,EAA5C,EAA+CJ,SAA/C,CAAN;AACH;AACJ,GAhB0B,EAgBxB,CAACH,SAAD,EAAYC,MAAZ,EAAoBF,UAApB,CAhBwB,CAA3B;AAkBA,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAA8C,IAAA,OAAO,EAAEG,OAAvD;AAAgE,IAAA,QAAQ,EAAE,CAACF,SAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA5BD;;GAAMF,c;UACqBN,a,EACDC,S,EACPI,S;;;KAHbC,c;AA8BN,eAAeA,cAAf","sourcesContent":["import { Button } from '@material-ui/core';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL, TransactionSignature } from '@solana/web3.js';\nimport React, { FC, useCallback } from 'react';\nimport { useNotify } from './notify';\n\nconst RequestAirdrop: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey } = useWallet();\n    const notify = useNotify();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify('error', 'Wallet not connected!');\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n            signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);\n            notify('info', 'Airdrop requested:', signature);\n\n            await connection.confirmTransaction(signature, 'processed');\n            notify('success', 'Airdrop successful!', signature);\n        } catch (error: any) {\n            notify('error', `Airdrop failed! ${error?.message}`, signature);\n        }\n    }, [publicKey, notify, connection]);\n\n    return (\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClick} disabled={!publicKey}>\n            Request Airdrop\n        </Button>\n    );\n};\n\nexport default RequestAirdrop;\n"]},"metadata":{},"sourceType":"module"}