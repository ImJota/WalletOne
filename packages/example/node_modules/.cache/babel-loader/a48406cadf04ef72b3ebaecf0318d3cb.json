{"ast":null,"code":"import _regeneratorRuntime from\"/home/jose/Documentos/Proyects/wallet/wallet-adapter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jose/Documentos/Proyects/wallet/wallet-adapter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Button}from'@material-ui/core';import{useWallet}from'@solana/wallet-adapter-react';import bs58 from'bs58';import React,{useCallback}from'react';import{useNotify}from'./notify';import{jsx as _jsx}from\"react/jsx-runtime\";var SignMessage=function SignMessage(){var _useWallet=useWallet(),publicKey=_useWallet.publicKey,signMessage=_useWallet.signMessage;var notify=useNotify();var onClick=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var message,signature;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(publicKey){_context.next=3;break;}notify('error','Wallet not connected!');return _context.abrupt(\"return\");case 3:if(signMessage){_context.next=6;break;}notify('error','Wallet does not support message signing!');return _context.abrupt(\"return\");case 6:_context.prev=6;message=new TextEncoder().encode('Hello, world!');_context.next=10;return signMessage(message);case 10:signature=_context.sent;notify('success',\"Message signature: \".concat(bs58.encode(signature)));_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](6);notify('error',\"Signing failed! \".concat(_context.t0===null||_context.t0===void 0?void 0:_context.t0.message));return _context.abrupt(\"return\");case 18:case\"end\":return _context.stop();}}},_callee,null,[[6,14]]);})),[publicKey,notify,signMessage]);return signMessage?/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:onClick,disabled:!publicKey,children:\"Sign Message\"}):null;};export default SignMessage;","map":{"version":3,"sources":["/home/jose/Documentos/Proyects/wallet/wallet-adapter/packages/example/src/SignMessage.tsx"],"names":["Button","useWallet","bs58","React","useCallback","useNotify","SignMessage","publicKey","signMessage","notify","onClick","message","TextEncoder","encode","signature"],"mappings":"mVAAA,OAASA,MAAT,KAAuB,mBAAvB,CACA,OAASC,SAAT,KAA0B,8BAA1B,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,KAAP,EAAoBC,WAApB,KAAuC,OAAvC,CACA,OAASC,SAAT,KAA0B,UAA1B,C,2CAEA,GAAMC,CAAAA,WAAe,CAAG,QAAlBA,CAAAA,WAAkB,EAAM,CAC1B,eAAmCL,SAAS,EAA5C,CAAQM,SAAR,YAAQA,SAAR,CAAmBC,WAAnB,YAAmBA,WAAnB,CACA,GAAMC,CAAAA,MAAM,CAAGJ,SAAS,EAAxB,CAEA,GAAMK,CAAAA,OAAO,CAAGN,WAAW,sEAAC,4JACnBG,SADmB,yBAEpBE,MAAM,CAAC,OAAD,CAAU,uBAAV,CAAN,CAFoB,2CAKnBD,WALmB,yBAMpBC,MAAM,CAAC,OAAD,CAAU,0CAAV,CAAN,CANoB,wDAWdE,OAXc,CAWJ,GAAIC,CAAAA,WAAJ,GAAkBC,MAAlB,CAAyB,eAAzB,CAXI,wBAaIL,CAAAA,WAAW,CAACG,OAAD,CAbf,SAadG,SAbc,eAcpBL,MAAM,CAAC,SAAD,8BAAkCP,IAAI,CAACW,MAAL,CAAYC,SAAZ,CAAlC,EAAN,CAdoB,iFAgBpBL,MAAM,CAAC,OAAD,2EAA6B,YAAOE,OAApC,EAAN,CAhBoB,sGAAD,GAmBxB,CAACJ,SAAD,CAAYE,MAAZ,CAAoBD,WAApB,CAnBwB,CAA3B,CAqBA,MAAOA,CAAAA,WAAW,cACd,KAAC,MAAD,EAAQ,OAAO,CAAC,WAAhB,CAA4B,KAAK,CAAC,WAAlC,CAA8C,OAAO,CAAEE,OAAvD,CAAgE,QAAQ,CAAE,CAACH,SAA3E,0BADc,CAId,IAJJ,CAKH,CA9BD,CAgCA,cAAeD,CAAAA,WAAf","sourcesContent":["import { Button } from '@material-ui/core';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport bs58 from 'bs58';\nimport React, { FC, useCallback } from 'react';\nimport { useNotify } from './notify';\n\nconst SignMessage: FC = () => {\n    const { publicKey, signMessage } = useWallet();\n    const notify = useNotify();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify('error', 'Wallet not connected!');\n            return;\n        }\n        if (!signMessage) {\n            notify('error', 'Wallet does not support message signing!');\n            return;\n        }\n\n        try {\n            const message = new TextEncoder().encode('Hello, world!');\n\n            const signature = await signMessage(message);\n            notify('success', `Message signature: ${bs58.encode(signature)}`);\n        } catch (error: any) {\n            notify('error', `Signing failed! ${error?.message}`);\n            return;\n        }\n    }, [publicKey, notify, signMessage]);\n\n    return signMessage ? (\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClick} disabled={!publicKey}>\n            Sign Message\n        </Button>\n    ) : null;\n};\n\nexport default SignMessage;\n"]},"metadata":{},"sourceType":"module"}